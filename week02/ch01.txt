
# 1장 : 노드 시작하기




## ✅ 1.1 핵심 개념 이해하기


```
Node.js는 Chrome V8 JavaScripts 엔진으로 빌드된 자바스크립트 런타임입니다.

즉, 자바스크립트 실행기이다
```


하지만 노드는 서버만 실행할 수 있는 것이 아님.

서버 외의 자바스크립트 프로그램을 실행하는 런타임으로 사용하는 방법도 있음.


노드가 가장 많이 사용되는 곳은 서버 어플리케이션 실행.
 


### 서버

: 네트워크를 통해 클라이언트에 정보나 서비스를 제공하는 컴퓨터 또는 프로그램.


### 클라이언트

: 요청을 보내는 주체. (브라우저, 데스크톱 프로그램, 모바일 앱, 다른 서버에게 요청을 보내는 서버 등)



### 요청 vs 응답

#### ex1)

요청 = 웹사이트 주소 입력

응답 = 웹사이트 페이지 받아와서 요청자의 브라우저에 띄운다


#### ex2)

요청 = 원하는 어플리케이션의 설치 버튼을 누른다

응답 = 클라이언트에서 내려받기



서버와 클라이언트는 고정된 주체가 아니라 역할임.

서버는 클라이언트의 요청에 대해서 응답함.

노드는 자바스크립트 프로그램이 서버로 기능할 수 잇는 도구를 제공함.




### 런타임

: 특정 언어로 만든 프로그램을 실행할 수 있는 환경

node외의 다른 런타임으로 번, 디노가 있음.

자바스크립트의 공부가 선행되어야 함.




### 왜 굳이 노드를 이용해 서버를 만들까?


◻ 자바스크립트의 실행 환경 -> 오직 웹 브라우저

: 브라우저는 자바스크립트 런타임 내장.

다른 환경에서는 실행 속도 문제 발생.


◻ 2008년 구글의 V8엔진 크롬 출시

: 자바스크립트 속도 문제 해결


◻ V8 엔진 기반 노드 프로젝트 시작(2009, 라이언 달)


◻ 노드 = V8 엔진 + libuv 라이브러리 (이벤트 기반, 논블로킹 I/O모델 구현)







### 이벤트 기반

: 이벤트(클릭, 네트워크 요청 등)가 발생할 때 미리 지정해둔 작업을 수행하는 방식.



### 이벤트 기반 시스템

: 특정 이벤트 발생시 무엇을 할 지 미리 등록



###  "이벤트 리스너에 콜백함수를 등록한다"



### 이벤트 리스너 vs 콜백 함수

#### ex1)

이벤트 리스너 = 클릭 이벤트

콜백 함수 = 경고창을 띄운다

-> 클릭 이벤트가 발생할 경우 콜백 함수가 실행 돼 경고창이 뜬다.


### "이벤트가 발생하면 이벤트 리스너에 등록해둔 콜백함수를 호출한다"

### "발생 이벤트 X, 이벤트 처리 완료시, 노드는 다음 이벤트 발생까지 기다림."





### 루프

: 여러 이벤트가 동시에 발생했을 때 어떤 순서로 콜백 함수를 호출할지 판단하는 주체



### 노드의 실행 순서

: 코드의 맨 윗줄부터 한 줄 씩 실행.

함수 호출 발견 -> 해당 함수를 호출 스택에 넣기 -> 가장 마지막에 넣어진 것이 가장 먼저 실행


작성 코드
```
function first() {
  second();
  console.log('첫 번째');
}
function second() {
  third();
  console.log('두 번째');
}
function third() {
  console.log('세 번째');
}
first();
```




콘솔 출력 결과
```
세 번째
두 번째
첫 번째
```



![image](https://github.com/DS-Corner-Study/lama/assets/101644134/a33461b9-773e-4676-9dcf-b1d40cf64f7c)


anonymous = 처음 실행 시의 전역 콘테스트(함수 호출시 생성 환경)


코드 실행시 기본적으로 전역 콘텍스트 안에서 돌아감


함수 실행 완료시 호출 스택에서 삭제 (실행 순서대로 삭제 = 쌓인 순서의 역순으로 삭제)




위의 사례와 조금 다른 setTimeout()


함수 코드

```
function run() { 
  console.log('3초 후 실행');
}
console.log('시작');
setTimeout(run, 3000);
 
console.log('끝');

```


콘솔 결과
```
시작
끝
3초 후 실행
```


### setTimeout()

: 3초 뒤에 run함수를 실행하는 코드.

setTimeout 함수의 콜백인 run이 호출 스택에 언제 들어가는지 설명하기에 앞서 이미지 참고

![image](https://github.com/DS-Corner-Study/lama/assets/101644134/bd3a24bc-eb53-40c9-9fae-0568c18d97db)


### 호출 스택 삽입 순서

1. anonymous

2. setTimeout


### 실행 순서

1. setTimeout

2. 타이머, run 은 백그라운으로 이동

3. setTimeout 호출 스택에서 삭제

4. 백그라운드에서 3초 세기 = 백그라운드 작업 완료

5. run 함수를 태스크 큐로 보냄

6. 호출 스택 공란

7. 태스크 큐에서 하나씩 함수 가져와 호출 스택에 넣고 실행

8. run() 함수 호출스택에서 실행

9.실행 후 호출 스택에서 제거




### 이벤트 루프 = 루프

: 이벤트 발생 시 호출할 콜백 함수 관리, 호출된 콜백 함수의 실행 순서 결정.

콜백 함수를 호출 스택으로 부름

노드 종료까지 반복하기에 루프라고 부름


### 백그라운드

: setTimeout 같은 타이머나 이벤트 리스너가 대기하는 곳. 자바스크립트 아닌 다른 언어로 작성된 곳. 여러 작업 동시 실행 가능


### 태스크 큐 = 콜백 큐

: 이벤트 발생 후 백그라운드에서 태스크 큐로 함수(타이머, 이벤트 리스터의 콜백 함수) 전송. 여러개로 구성됨.

보통 완료된 순서대로 줄 서 있지만, 특정한 경우 순서 바뀌기도 함.





### 작업의 종류

* 동시에 실행 가능 작업 = I/O 작업

* 동시에 실행 불가능 작업 = 기본적인 자바스크립트 상의 삭업



### I/O

: Input / Output을 의미. 파일 시스템 접근이나 네트워크를 통한 요청 같은 작업.

노드는 백그라운드로 이 작업을 넘겨 동시에 처리.




### 논블로킹 I/O

: 이전 작업이 완료될 때 까지 대기하지 않고 다음 작업을 수행하는 것. 같은 작업을 더 짧은 시간에 처리.

모두 동시에 처리될 수 있는 작업이여야 함.

순서를 신경써서 이 방식으로 코딩을 해야 함

'동시'와 동일한 의미가 아님. '비동기'와 유사한 의미.


// 예제 : setTimeout 이용
```
function longRunningTask() {
  // 오래 걸리는 작업
  console.log('작업 끝');
}
console.log('시작');
setTimeout(longRunningTask, 0);
console.log('다음 작업');
내용을 입력하세요.
```

위의 코드는 실행 순서를 바꿔 실행 시간을 줄임.




### 블로킹

: 이전 작업이 끝나야만 다음 작업을 수행하는 것. '동기'와 유사한 의미.



### 블로킹이 심한 작업 -> 논블로킹 방법으로 대기시간 줄이기





### 스레드 = 작업 처리 일손

: 프로세스 내 실행되는 흐름의 단위.

부모 프로세스의 자원 공유.

같은 주소의 메모리에 접근 가능 = 데이터 공유 가능.



### 프로세스

: 운영체제에서 할당하는 작업 단위.

노드나 웹 브라우저 같은 프로그램은 개별적인 프로세스.

프로세스 간 자원 공유x.

프로세스는 스레드를 여러 개 생성해 여러 작업 동시 처리 가능


### 싱글 스레드

: 스레드가 하나 뿐. 노드의 사례.


### 멀티 스레드

: 여러개의 스레드


노드의 실행과 동작 순서

노드 실행

프로세스 하나 생성

2에서 생성된 프로세스가 스레드들을 내부적으로 여러개 생성

사용자가 제어할 수 있는 스레드는 그중 하나.


결국 노드의 스레드는 여러개이지만, 사용자가 제어할 수 있는 건 1개, 싱글 스레드.



###  *예외 - 노드가 싱글 스레드로 작동X

스레드 풀 : 노드 스스로 멀티 스레드 사용. (암호화, 파일 입출력, 압축 등)

워커 스레드 : 노드 버전12 에서 안정화. 사용자가 직접 다수의 스레드 다룰 수 있음. (CPU 작업 많은 경우 등)





**
아래의 예시에서 점원=스레드, 고객=여러 함수를 의미.
**

### 싱글 스레드, 블로킹 모델

: 점원 1명이 고객1명과 주문 받기, 주방에 넘기기, 서빙하기를 진행할 때 까지 다른 고객이 대기하는 구조

비효율적


### 싱글 스레드, 논블로킹 모델

: 점원 1명이 각 고객으로부터 주문 받기, 주방에 넘기기만 진행. 서빙하기는 주문받기 이후.

노드가 이용하는 방식.


### 멀티 스레드 모델

: 점원 수 = 고객 수. 고객이 줄면 노는 점원이 많고, 고객이 늘어나면 점원도 같이 많아져야 함.


### 멀티 스레드, 논플로킹 모델

: 멀티스레드 방식 프로그래밍이 너무 어려워서, 멀티 프로세싱 방식을 대신 사용.






## ✅ 1.2 서버로서의 노드


노드를 서버로 사용할 때의 특성과 장단점 = 싱글 스레드, 논블로킹 모델의 장단점


### 장점

1. 많은 I/O 처리에 적합

2. 개수 많고 크기 작은 데이터 실시간 주고받기 적합

3. 네트워크, 데이터베이스, 디스크 작업 등에 적합 (실시간 채팅, 주식 차트, JSON 데이터 제공 API 서버)

4. 싱글 스레드 방식이 멀티 스레드 방식보다 쉬워 서버 프로그래밍에 입문 쉬움

5. 웹 서버 내장되어 입문 쉬움

6. 자바스크립트 언어 사용 - 개발 생산성 높임

7. json과 같은 형식이라 처리 쉬움



### 단점

1. CPU 부하가 큰 작업에 부적합. (비디오처리, 대규모 데이터 처리)

-> AWS 람다, 구글 클라우드 펑션스 등에서 이 단점을 극복 가능

2. 원활한 에러 처리 - 하나뿐인 스레드 멈추지 않도록 잘 관리

3. 서버 규모가 커지면 결국 nginx 등 외부 웹 서버를 노드와 연결해서 사용해야 함

4. go, nginx보다 속도 느림 - 어중간한 성능



## ✅ 1.3 서버 외의 노드


서버뿐 아니라 노드는 웹, 모바일, 데스크톱 애플리케이션 개발에도 사용


### 노드 기반 웹 프레임 워크

: 앵귤러, 리액트, 뷰 | 리액트 네이티브 | 일렉트론




## ✅ 1.4 개발 환경 세팅하기


에디터로 VSCode 이용.


교재에서 가장 최신 버전인 18.7.0 을 설치하거나 짝수 버전을 설치 권장. (홀수 버전은 LTS를 지원하지 않음)

필자의 경우 현재(23.9) 최신 버전은 20.7.0 이기에 이를 이용해 진행.


만약 기존 버전에서 가장 최신 버전으로 업그레이드를 해야 한다면,

아래의 명령어를 참고.

```
// 현재 노드 버전 확인
node --version
node -v

// 가장 최신 버전 노드 설치
nvm install node

// 가장 최신 버전의 노드로 버전 변경
nvm use neweset
내용을 입력하세요.
```

노드와 npm모두 설치되어 있어야 함.


npm에 대한 명령어는 아래를 참고.
```
// 현재 npm 버전 확인
npm -v

// npm 버전 업그레이드
npm install -g npm
내용을 입력하세요.
```

## ✅ 1.5 함께 보면 좋을 자료


    • 노드 공식 사이트: https://nodejs.org/ko

    • 노드 공식 사이트의 가이드: https://nodejs.org/ko/docs/guides/

    • 노드에 대한 전반적인 설명: https://nodejs.dev/

    • 이벤트 루프 설명: https://nodejs.org/ko/docs/guides/event-loop-timers-and-nexttick/

    • 이벤트 루프에 대한 시각적 설명: http://latentflip.com/loupe

    • VS Code 공식 사이트: https://code.visualstudio.com/

    • Homebrew 사이트: https://brew.sh/index_ko

